RESERVED_KEYWORDS: end if else elif while for return pass goto break continue lambda try catch except yield await then with raise throw and or var as true false impl match switch

int:
rx%[0-9]+%rx

float:
rx%[0-9]*\.[0-9]+%rx
rx%[0-9]+\.[0-9]*%rx

string:
rx%"(?:[^\\"]|\\.)*"%rx

name:
rx%[a-zA-Z_][a-zA-Z_0-9]*%rx

null:
"null"

bool:
"true" | "false"

primitive_type: 
"int" | "float" | "bool" | "str" | 

simple_expr: @notokens @flatten
"(" expr ")"
int | float | string | null | bool | name

funccall: @notokens
"(" (expr ",")* expr? ")"

index: @notokens
"[" expr "]"

dismember: @notokens
"." name

expr_tail_0:
funccall
index
dismember

base_unexp: @flatten
simple_expr expr_tail_0*

funccall_statement:
simple_expr expr_tail_0* funccall

base_binexp: @flatten
("-"|"+")? base_unexp

binexp_3: @left_recursive @flatten
base_binexp ("*"|"/"|"%"|"<<"|">>") binexp_3
base_binexp

binexp_2: @left_recursive @flatten
binexp_3 ("+"|"-"|"&"|"|"|"^") binexp_2
binexp_3

binexp_1: @left_recursive @flatten
binexp_2 ("=="|"!="|">="|"<="|">"|"<") binexp_1
binexp_2

binexp_0: @left_recursive @flatten
binexp_1 ("and"|"or") binexp_0
binexp_1

expr:
if_ternary
binexp_0

vardec_name_and_type: @notokens
name ":" name
name

vardec: @notokens
"var" vardec_name_and_type "=" expr
"var" name "=" expr
"var" vardec_name_and_type

globalvardec: @notokens
"var" name "=" expr

elif: @notokens
("else" "if" | "elif") "(" expr ")" ":" block

else: @notokens
"else" ":" block

if: @notokens
"if" "(" expr ")" ":" block elif* else? "end"

elif_short: @notokens
"else" "if" "(" expr ")" simple_block

else_short: @notokens
"else" simple_block

if_short: @notokens
"if" "(" expr ")" simple_block elif_short* else_short?

elif_short: @notokens
"else" "if" "(" expr ")" simple_block

if_ternary: @notokens
"if" "(" expr ")" expr "else" expr

while: @notokens
"while" "(" expr ")" ":" block "end"

while_short: @notokens
"while" "(" expr ")" simple_block

foreach: @notokens
"for" "(" vardec_name_and_type "in" int "to" int ")" ":" block "end"
"for" "(" vardec_name_and_type "in" expr ")" ":" block "end"

foreach_short: @notokens
"for" "(" vardec_name_and_type "in" int "to" int ")" simple_block
"for" "(" vardec_name_and_type "in" expr ")" simple_block

return: @notokens
"return" expr?

pass: @notokens
"pass"

assign: @notokens
name "=" expr

assign_binop:
name ("+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "^=" | "<<=" | ">>=") expr

statement: @notokens
(if | if_short | while | while_short | foreach | foreach_short | vardec | assign | assign_binop | funccall_statement | return | pass) ";"?

simple_statement: @notokens
(vardec | assign | assign_binop | funccall_statement | return | pass) ";"?

simple_block: @notokens
simple_statement

block: @notokens
statement*

funcdefargs: @notokens
"(" (name ",")* name? ")"

funcdef: @notokens
"func" name funcdefargs ":" block "end"

program:
(funcdef | globalvardec)+
